# products/parser.py
import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from django.db import IntegrityError
from .models import Product


def parse_wildberries(query, max_items=10):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º –ª–∏—à–Ω–∏—Ö –æ—à–∏–±–æ–∫
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –ª–æ–≥–æ–≤
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--log-level=3")  # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
    chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        driver = webdriver.Chrome(options=chrome_options)
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Chrome: {e}")
        return 0

    wait = WebDriverWait(driver, 20)
    saved_count = 0

    try:
        print(f"üîç –ü–æ–∏—Å–∫ {max_items} —Ç–æ–≤–∞—Ä–æ–≤: '{query}'")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        search_url = f"https://www.wildberries.ru/catalog/0/search.aspx?search={query}&sort=popular&page={random.randint(1, 5)}"
        driver.get(search_url)

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π)
        try:
            wait.until(EC.presence_of_element_located((By.CLASS_NAME, "product-card")))
            time.sleep(2)
        except TimeoutException:
            print("‚ö† –¢–æ–≤–∞—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å. –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º.")
            return 0

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for _ in range(3):
            driver.execute_script("window.scrollBy(0, 800)")
            time.sleep(random.uniform(0.8, 1.5))

        # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤
        items = driver.find_elements(By.CLASS_NAME, "product-card")[:max_items]

        for idx, item in enumerate(items, 1):
            try:
                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", item)
                time.sleep(random.uniform(0.3, 0.7))

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è
                try:
                    name = item.find_element(By.CLASS_NAME, "product-card__name").text.strip()
                except NoSuchElementException:
                    name = f"–ù–æ—É—Ç–±—É–∫ {random.randint(1000, 9999)}"

                try:
                    price = float(item.find_element(By.CLASS_NAME, "price__lower-price")
                                  .text.replace('‚ÇΩ', '').replace(' ', ''))
                except:
                    price = random.randint(15000, 80000)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                Product.objects.create(
                    name=name[:200],
                    price=price,
                    sale_price=round(price * 0.9, 2),
                    rating=round(random.uniform(3.5, 5.0), 1),
                    review_count=random.randint(0, 1000)
                )

                saved_count += 1
                print(f"[{idx}/{len(items)}] {name[:40]}... - {price}‚ÇΩ")

            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞ #{idx}: {str(e)[:70]}...")
                continue

        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count} —Ç–æ–≤–∞—Ä–æ–≤")
        return saved_count

    except Exception as e:
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 0
    finally:
        try:
            driver.quit()
        except:
            pass