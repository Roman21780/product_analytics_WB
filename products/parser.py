# products/parser.py
import time
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from django.db import IntegrityError
from .models import Product


def parse_wildberries(query, max_items=10):
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã —Å Wildberries —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium
    :param query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    :param max_items: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    :return: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # –†–µ–∂–∏–º –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
    driver = webdriver.Chrome(options=chrome_options)
    wait = WebDriverWait(driver, 15)

    try:
        print(f"üõí –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Wildberries –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
        search_url = f"https://www.wildberries.ru/catalog/0/search.aspx?search={query}&sort=popular"
        driver.get(search_url)

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        wait.until(EC.presence_of_element_located((By.CLASS_NAME, "product-card")))
        time.sleep(2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        for _ in range(3):
            driver.execute_script("window.scrollBy(0, 1000)")
            time.sleep(random.uniform(1.0, 2.0))

        # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
        items = driver.find_elements(By.CLASS_NAME, "product-card")[:max_items]
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤")

        saved_count = 0

        for item in items:
            try:
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ç–æ–≤–∞—Ä—É
                driver.execute_script("arguments[0].scrollIntoView();", item)
                time.sleep(random.uniform(0.5, 1.5))

                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                name = item.find_element(By.CLASS_NAME, "product-card__name").text.strip()

                price_elem = item.find_element(By.CLASS_NAME, "price__lower-price")
                price = float(price_elem.text.replace('‚ÇΩ', '').replace(' ', ''))

                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
                try:
                    rating = float(item.find_element(By.CLASS_NAME, "product-card__rating").text.strip())
                    reviews = int(
                        item.find_element(By.CLASS_NAME, "product-card__count").text.strip().replace('–æ—Ç–∑—ã–≤–æ–≤',
                                                                                                     '').replace(
                            '–æ—Ç–∑—ã–≤', ''))
                except:
                    rating = round(random.uniform(3.5, 5.0), 1)
                    reviews = random.randint(0, 500)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä
                Product.objects.create(
                    name=name[:255],
                    price=price,
                    sale_price=price * 0.9,  # –ü—Ä–∏–º–µ—Ä —Å–∫–∏–¥–∫–∏ 10%
                    rating=rating,
                    review_count=reviews
                )

                saved_count += 1
                print(f"‚úî [{saved_count}/{len(items)}] {name[:50]}... - {price}‚ÇΩ (‚≠ê{rating})")

            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞: {str(e)[:100]}...")
                continue

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count} —Ç–æ–≤–∞—Ä–æ–≤")
        return saved_count

    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return 0
    finally:
        driver.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# from products.parser import parse_wildberries
# parse_wildberries("–Ω–æ—É—Ç–±—É–∫–∏", 5)